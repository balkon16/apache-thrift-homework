/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.pja.sri.hw06.stockpriceservice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-12")
public class StockPrice implements org.apache.thrift.TBase<StockPrice, StockPrice._Fields>, java.io.Serializable, Cloneable, Comparable<StockPrice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StockPrice");

  private static final org.apache.thrift.protocol.TField TICKER_FIELD_DESC = new org.apache.thrift.protocol.TField("ticker", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField STOCK_EXCHANGE_SHORT_NAME_INTL_FIELD_DESC = new org.apache.thrift.protocol.TField("stockExchangeShortNameIntl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StockPriceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StockPriceTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String ticker; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String currency; // required
  public double price; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String stockExchangeShortNameIntl; // required
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TICKER((short)1, "ticker"),
    CURRENCY((short)2, "currency"),
    PRICE((short)3, "price"),
    STOCK_EXCHANGE_SHORT_NAME_INTL((short)4, "stockExchangeShortNameIntl"),
    TIMESTAMP((short)5, "timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TICKER
          return TICKER;
        case 2: // CURRENCY
          return CURRENCY;
        case 3: // PRICE
          return PRICE;
        case 4: // STOCK_EXCHANGE_SHORT_NAME_INTL
          return STOCK_EXCHANGE_SHORT_NAME_INTL;
        case 5: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TICKER, new org.apache.thrift.meta_data.FieldMetaData("ticker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOCK_EXCHANGE_SHORT_NAME_INTL, new org.apache.thrift.meta_data.FieldMetaData("stockExchangeShortNameIntl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StockPrice.class, metaDataMap);
  }

  public StockPrice() {
  }

  public StockPrice(
    java.lang.String ticker,
    java.lang.String currency,
    double price,
    java.lang.String stockExchangeShortNameIntl,
    long timestamp)
  {
    this();
    this.ticker = ticker;
    this.currency = currency;
    this.price = price;
    setPriceIsSet(true);
    this.stockExchangeShortNameIntl = stockExchangeShortNameIntl;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StockPrice(StockPrice other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTicker()) {
      this.ticker = other.ticker;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.price = other.price;
    if (other.isSetStockExchangeShortNameIntl()) {
      this.stockExchangeShortNameIntl = other.stockExchangeShortNameIntl;
    }
    this.timestamp = other.timestamp;
  }

  public StockPrice deepCopy() {
    return new StockPrice(this);
  }

  @Override
  public void clear() {
    this.ticker = null;
    this.currency = null;
    setPriceIsSet(false);
    this.price = 0.0;
    this.stockExchangeShortNameIntl = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTicker() {
    return this.ticker;
  }

  public StockPrice setTicker(@org.apache.thrift.annotation.Nullable java.lang.String ticker) {
    this.ticker = ticker;
    return this;
  }

  public void unsetTicker() {
    this.ticker = null;
  }

  /** Returns true if field ticker is set (has been assigned a value) and false otherwise */
  public boolean isSetTicker() {
    return this.ticker != null;
  }

  public void setTickerIsSet(boolean value) {
    if (!value) {
      this.ticker = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCurrency() {
    return this.currency;
  }

  public StockPrice setCurrency(@org.apache.thrift.annotation.Nullable java.lang.String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public StockPrice setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStockExchangeShortNameIntl() {
    return this.stockExchangeShortNameIntl;
  }

  public StockPrice setStockExchangeShortNameIntl(@org.apache.thrift.annotation.Nullable java.lang.String stockExchangeShortNameIntl) {
    this.stockExchangeShortNameIntl = stockExchangeShortNameIntl;
    return this;
  }

  public void unsetStockExchangeShortNameIntl() {
    this.stockExchangeShortNameIntl = null;
  }

  /** Returns true if field stockExchangeShortNameIntl is set (has been assigned a value) and false otherwise */
  public boolean isSetStockExchangeShortNameIntl() {
    return this.stockExchangeShortNameIntl != null;
  }

  public void setStockExchangeShortNameIntlIsSet(boolean value) {
    if (!value) {
      this.stockExchangeShortNameIntl = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public StockPrice setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TICKER:
      if (value == null) {
        unsetTicker();
      } else {
        setTicker((java.lang.String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((java.lang.String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((java.lang.Double)value);
      }
      break;

    case STOCK_EXCHANGE_SHORT_NAME_INTL:
      if (value == null) {
        unsetStockExchangeShortNameIntl();
      } else {
        setStockExchangeShortNameIntl((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TICKER:
      return getTicker();

    case CURRENCY:
      return getCurrency();

    case PRICE:
      return getPrice();

    case STOCK_EXCHANGE_SHORT_NAME_INTL:
      return getStockExchangeShortNameIntl();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TICKER:
      return isSetTicker();
    case CURRENCY:
      return isSetCurrency();
    case PRICE:
      return isSetPrice();
    case STOCK_EXCHANGE_SHORT_NAME_INTL:
      return isSetStockExchangeShortNameIntl();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof StockPrice)
      return this.equals((StockPrice)that);
    return false;
  }

  public boolean equals(StockPrice that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ticker = true && this.isSetTicker();
    boolean that_present_ticker = true && that.isSetTicker();
    if (this_present_ticker || that_present_ticker) {
      if (!(this_present_ticker && that_present_ticker))
        return false;
      if (!this.ticker.equals(that.ticker))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_stockExchangeShortNameIntl = true && this.isSetStockExchangeShortNameIntl();
    boolean that_present_stockExchangeShortNameIntl = true && that.isSetStockExchangeShortNameIntl();
    if (this_present_stockExchangeShortNameIntl || that_present_stockExchangeShortNameIntl) {
      if (!(this_present_stockExchangeShortNameIntl && that_present_stockExchangeShortNameIntl))
        return false;
      if (!this.stockExchangeShortNameIntl.equals(that.stockExchangeShortNameIntl))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTicker()) ? 131071 : 524287);
    if (isSetTicker())
      hashCode = hashCode * 8191 + ticker.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
    if (isSetCurrency())
      hashCode = hashCode * 8191 + currency.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(price);

    hashCode = hashCode * 8191 + ((isSetStockExchangeShortNameIntl()) ? 131071 : 524287);
    if (isSetStockExchangeShortNameIntl())
      hashCode = hashCode * 8191 + stockExchangeShortNameIntl.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    return hashCode;
  }

  @Override
  public int compareTo(StockPrice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTicker(), other.isSetTicker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticker, other.ticker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrency(), other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrice(), other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStockExchangeShortNameIntl(), other.isSetStockExchangeShortNameIntl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockExchangeShortNameIntl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockExchangeShortNameIntl, other.stockExchangeShortNameIntl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StockPrice(");
    boolean first = true;

    sb.append("ticker:");
    if (this.ticker == null) {
      sb.append("null");
    } else {
      sb.append(this.ticker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockExchangeShortNameIntl:");
    if (this.stockExchangeShortNameIntl == null) {
      sb.append("null");
    } else {
      sb.append(this.stockExchangeShortNameIntl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ticker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticker' was not present! Struct: " + toString());
    }
    if (currency == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'currency' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'price' because it's a primitive and you chose the non-beans generator.
    if (stockExchangeShortNameIntl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stockExchangeShortNameIntl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StockPriceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StockPriceStandardScheme getScheme() {
      return new StockPriceStandardScheme();
    }
  }

  private static class StockPriceStandardScheme extends org.apache.thrift.scheme.StandardScheme<StockPrice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StockPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TICKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticker = iprot.readString();
              struct.setTickerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STOCK_EXCHANGE_SHORT_NAME_INTL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stockExchangeShortNameIntl = iprot.readString();
              struct.setStockExchangeShortNameIntlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'price' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StockPrice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ticker != null) {
        oprot.writeFieldBegin(TICKER_FIELD_DESC);
        oprot.writeString(struct.ticker);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      if (struct.stockExchangeShortNameIntl != null) {
        oprot.writeFieldBegin(STOCK_EXCHANGE_SHORT_NAME_INTL_FIELD_DESC);
        oprot.writeString(struct.stockExchangeShortNameIntl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StockPriceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StockPriceTupleScheme getScheme() {
      return new StockPriceTupleScheme();
    }
  }

  private static class StockPriceTupleScheme extends org.apache.thrift.scheme.TupleScheme<StockPrice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StockPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.ticker);
      oprot.writeString(struct.currency);
      oprot.writeDouble(struct.price);
      oprot.writeString(struct.stockExchangeShortNameIntl);
      oprot.writeI64(struct.timestamp);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StockPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ticker = iprot.readString();
      struct.setTickerIsSet(true);
      struct.currency = iprot.readString();
      struct.setCurrencyIsSet(true);
      struct.price = iprot.readDouble();
      struct.setPriceIsSet(true);
      struct.stockExchangeShortNameIntl = iprot.readString();
      struct.setStockExchangeShortNameIntlIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

