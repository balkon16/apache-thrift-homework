/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.pja.sri.hw06.exchangerateservice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-12")
public class ExchangeRateService {

  public interface Iface {

    public ExchangeRate getLatestExchangeRate(java.lang.String baseCurrency, java.lang.String quoteCurrency, boolean allowCross) throws org.apache.thrift.TException;

    public java.util.List<ExchangeRate> getExchangeRatesForWindow(java.lang.String baseCurrency, java.lang.String quoteCurrency, long fromTimestamp, long toTimestamp) throws org.apache.thrift.TException;

    public edu.pja.sri.hw06.stockexchangeservice.StatusMessage addNewRate(ExchangeRate newRate) throws org.apache.thrift.TException;

    public edu.pja.sri.hw06.stockexchangeservice.StatusMessage addBulk(java.util.List<ExchangeRate> newRates) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getLatestExchangeRate(java.lang.String baseCurrency, java.lang.String quoteCurrency, boolean allowCross, org.apache.thrift.async.AsyncMethodCallback<ExchangeRate> resultHandler) throws org.apache.thrift.TException;

    public void getExchangeRatesForWindow(java.lang.String baseCurrency, java.lang.String quoteCurrency, long fromTimestamp, long toTimestamp, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ExchangeRate>> resultHandler) throws org.apache.thrift.TException;

    public void addNewRate(ExchangeRate newRate, org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> resultHandler) throws org.apache.thrift.TException;

    public void addBulk(java.util.List<ExchangeRate> newRates, org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ExchangeRate getLatestExchangeRate(java.lang.String baseCurrency, java.lang.String quoteCurrency, boolean allowCross) throws org.apache.thrift.TException
    {
      send_getLatestExchangeRate(baseCurrency, quoteCurrency, allowCross);
      return recv_getLatestExchangeRate();
    }

    public void send_getLatestExchangeRate(java.lang.String baseCurrency, java.lang.String quoteCurrency, boolean allowCross) throws org.apache.thrift.TException
    {
      getLatestExchangeRate_args args = new getLatestExchangeRate_args();
      args.setBaseCurrency(baseCurrency);
      args.setQuoteCurrency(quoteCurrency);
      args.setAllowCross(allowCross);
      sendBase("getLatestExchangeRate", args);
    }

    public ExchangeRate recv_getLatestExchangeRate() throws org.apache.thrift.TException
    {
      getLatestExchangeRate_result result = new getLatestExchangeRate_result();
      receiveBase(result, "getLatestExchangeRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestExchangeRate failed: unknown result");
    }

    public java.util.List<ExchangeRate> getExchangeRatesForWindow(java.lang.String baseCurrency, java.lang.String quoteCurrency, long fromTimestamp, long toTimestamp) throws org.apache.thrift.TException
    {
      send_getExchangeRatesForWindow(baseCurrency, quoteCurrency, fromTimestamp, toTimestamp);
      return recv_getExchangeRatesForWindow();
    }

    public void send_getExchangeRatesForWindow(java.lang.String baseCurrency, java.lang.String quoteCurrency, long fromTimestamp, long toTimestamp) throws org.apache.thrift.TException
    {
      getExchangeRatesForWindow_args args = new getExchangeRatesForWindow_args();
      args.setBaseCurrency(baseCurrency);
      args.setQuoteCurrency(quoteCurrency);
      args.setFromTimestamp(fromTimestamp);
      args.setToTimestamp(toTimestamp);
      sendBase("getExchangeRatesForWindow", args);
    }

    public java.util.List<ExchangeRate> recv_getExchangeRatesForWindow() throws org.apache.thrift.TException
    {
      getExchangeRatesForWindow_result result = new getExchangeRatesForWindow_result();
      receiveBase(result, "getExchangeRatesForWindow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExchangeRatesForWindow failed: unknown result");
    }

    public edu.pja.sri.hw06.stockexchangeservice.StatusMessage addNewRate(ExchangeRate newRate) throws org.apache.thrift.TException
    {
      send_addNewRate(newRate);
      return recv_addNewRate();
    }

    public void send_addNewRate(ExchangeRate newRate) throws org.apache.thrift.TException
    {
      addNewRate_args args = new addNewRate_args();
      args.setNewRate(newRate);
      sendBase("addNewRate", args);
    }

    public edu.pja.sri.hw06.stockexchangeservice.StatusMessage recv_addNewRate() throws org.apache.thrift.TException
    {
      addNewRate_result result = new addNewRate_result();
      receiveBase(result, "addNewRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addNewRate failed: unknown result");
    }

    public edu.pja.sri.hw06.stockexchangeservice.StatusMessage addBulk(java.util.List<ExchangeRate> newRates) throws org.apache.thrift.TException
    {
      send_addBulk(newRates);
      return recv_addBulk();
    }

    public void send_addBulk(java.util.List<ExchangeRate> newRates) throws org.apache.thrift.TException
    {
      addBulk_args args = new addBulk_args();
      args.setNewRates(newRates);
      sendBase("addBulk", args);
    }

    public edu.pja.sri.hw06.stockexchangeservice.StatusMessage recv_addBulk() throws org.apache.thrift.TException
    {
      addBulk_result result = new addBulk_result();
      receiveBase(result, "addBulk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBulk failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getLatestExchangeRate(java.lang.String baseCurrency, java.lang.String quoteCurrency, boolean allowCross, org.apache.thrift.async.AsyncMethodCallback<ExchangeRate> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestExchangeRate_call method_call = new getLatestExchangeRate_call(baseCurrency, quoteCurrency, allowCross, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestExchangeRate_call extends org.apache.thrift.async.TAsyncMethodCall<ExchangeRate> {
      private java.lang.String baseCurrency;
      private java.lang.String quoteCurrency;
      private boolean allowCross;
      public getLatestExchangeRate_call(java.lang.String baseCurrency, java.lang.String quoteCurrency, boolean allowCross, org.apache.thrift.async.AsyncMethodCallback<ExchangeRate> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.baseCurrency = baseCurrency;
        this.quoteCurrency = quoteCurrency;
        this.allowCross = allowCross;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestExchangeRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestExchangeRate_args args = new getLatestExchangeRate_args();
        args.setBaseCurrency(baseCurrency);
        args.setQuoteCurrency(quoteCurrency);
        args.setAllowCross(allowCross);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExchangeRate getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestExchangeRate();
      }
    }

    public void getExchangeRatesForWindow(java.lang.String baseCurrency, java.lang.String quoteCurrency, long fromTimestamp, long toTimestamp, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ExchangeRate>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExchangeRatesForWindow_call method_call = new getExchangeRatesForWindow_call(baseCurrency, quoteCurrency, fromTimestamp, toTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExchangeRatesForWindow_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ExchangeRate>> {
      private java.lang.String baseCurrency;
      private java.lang.String quoteCurrency;
      private long fromTimestamp;
      private long toTimestamp;
      public getExchangeRatesForWindow_call(java.lang.String baseCurrency, java.lang.String quoteCurrency, long fromTimestamp, long toTimestamp, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ExchangeRate>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.baseCurrency = baseCurrency;
        this.quoteCurrency = quoteCurrency;
        this.fromTimestamp = fromTimestamp;
        this.toTimestamp = toTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExchangeRatesForWindow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExchangeRatesForWindow_args args = new getExchangeRatesForWindow_args();
        args.setBaseCurrency(baseCurrency);
        args.setQuoteCurrency(quoteCurrency);
        args.setFromTimestamp(fromTimestamp);
        args.setToTimestamp(toTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<ExchangeRate> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExchangeRatesForWindow();
      }
    }

    public void addNewRate(ExchangeRate newRate, org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNewRate_call method_call = new addNewRate_call(newRate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNewRate_call extends org.apache.thrift.async.TAsyncMethodCall<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> {
      private ExchangeRate newRate;
      public addNewRate_call(ExchangeRate newRate, org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newRate = newRate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNewRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNewRate_args args = new addNewRate_args();
        args.setNewRate(newRate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public edu.pja.sri.hw06.stockexchangeservice.StatusMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addNewRate();
      }
    }

    public void addBulk(java.util.List<ExchangeRate> newRates, org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBulk_call method_call = new addBulk_call(newRates, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBulk_call extends org.apache.thrift.async.TAsyncMethodCall<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> {
      private java.util.List<ExchangeRate> newRates;
      public addBulk_call(java.util.List<ExchangeRate> newRates, org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newRates = newRates;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBulk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBulk_args args = new addBulk_args();
        args.setNewRates(newRates);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public edu.pja.sri.hw06.stockexchangeservice.StatusMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBulk();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getLatestExchangeRate", new getLatestExchangeRate());
      processMap.put("getExchangeRatesForWindow", new getExchangeRatesForWindow());
      processMap.put("addNewRate", new addNewRate());
      processMap.put("addBulk", new addBulk());
      return processMap;
    }

    public static class getLatestExchangeRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestExchangeRate_args> {
      public getLatestExchangeRate() {
        super("getLatestExchangeRate");
      }

      public getLatestExchangeRate_args getEmptyArgsInstance() {
        return new getLatestExchangeRate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getLatestExchangeRate_result getResult(I iface, getLatestExchangeRate_args args) throws org.apache.thrift.TException {
        getLatestExchangeRate_result result = new getLatestExchangeRate_result();
        result.success = iface.getLatestExchangeRate(args.baseCurrency, args.quoteCurrency, args.allowCross);
        return result;
      }
    }

    public static class getExchangeRatesForWindow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExchangeRatesForWindow_args> {
      public getExchangeRatesForWindow() {
        super("getExchangeRatesForWindow");
      }

      public getExchangeRatesForWindow_args getEmptyArgsInstance() {
        return new getExchangeRatesForWindow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getExchangeRatesForWindow_result getResult(I iface, getExchangeRatesForWindow_args args) throws org.apache.thrift.TException {
        getExchangeRatesForWindow_result result = new getExchangeRatesForWindow_result();
        result.success = iface.getExchangeRatesForWindow(args.baseCurrency, args.quoteCurrency, args.fromTimestamp, args.toTimestamp);
        return result;
      }
    }

    public static class addNewRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNewRate_args> {
      public addNewRate() {
        super("addNewRate");
      }

      public addNewRate_args getEmptyArgsInstance() {
        return new addNewRate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addNewRate_result getResult(I iface, addNewRate_args args) throws org.apache.thrift.TException {
        addNewRate_result result = new addNewRate_result();
        result.success = iface.addNewRate(args.newRate);
        return result;
      }
    }

    public static class addBulk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBulk_args> {
      public addBulk() {
        super("addBulk");
      }

      public addBulk_args getEmptyArgsInstance() {
        return new addBulk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addBulk_result getResult(I iface, addBulk_args args) throws org.apache.thrift.TException {
        addBulk_result result = new addBulk_result();
        result.success = iface.addBulk(args.newRates);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getLatestExchangeRate", new getLatestExchangeRate());
      processMap.put("getExchangeRatesForWindow", new getExchangeRatesForWindow());
      processMap.put("addNewRate", new addNewRate());
      processMap.put("addBulk", new addBulk());
      return processMap;
    }

    public static class getLatestExchangeRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestExchangeRate_args, ExchangeRate> {
      public getLatestExchangeRate() {
        super("getLatestExchangeRate");
      }

      public getLatestExchangeRate_args getEmptyArgsInstance() {
        return new getLatestExchangeRate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ExchangeRate> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ExchangeRate>() { 
          public void onComplete(ExchangeRate o) {
            getLatestExchangeRate_result result = new getLatestExchangeRate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLatestExchangeRate_result result = new getLatestExchangeRate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestExchangeRate_args args, org.apache.thrift.async.AsyncMethodCallback<ExchangeRate> resultHandler) throws org.apache.thrift.TException {
        iface.getLatestExchangeRate(args.baseCurrency, args.quoteCurrency, args.allowCross,resultHandler);
      }
    }

    public static class getExchangeRatesForWindow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExchangeRatesForWindow_args, java.util.List<ExchangeRate>> {
      public getExchangeRatesForWindow() {
        super("getExchangeRatesForWindow");
      }

      public getExchangeRatesForWindow_args getEmptyArgsInstance() {
        return new getExchangeRatesForWindow_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ExchangeRate>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ExchangeRate>>() { 
          public void onComplete(java.util.List<ExchangeRate> o) {
            getExchangeRatesForWindow_result result = new getExchangeRatesForWindow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getExchangeRatesForWindow_result result = new getExchangeRatesForWindow_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExchangeRatesForWindow_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ExchangeRate>> resultHandler) throws org.apache.thrift.TException {
        iface.getExchangeRatesForWindow(args.baseCurrency, args.quoteCurrency, args.fromTimestamp, args.toTimestamp,resultHandler);
      }
    }

    public static class addNewRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNewRate_args, edu.pja.sri.hw06.stockexchangeservice.StatusMessage> {
      public addNewRate() {
        super("addNewRate");
      }

      public addNewRate_args getEmptyArgsInstance() {
        return new addNewRate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage>() { 
          public void onComplete(edu.pja.sri.hw06.stockexchangeservice.StatusMessage o) {
            addNewRate_result result = new addNewRate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addNewRate_result result = new addNewRate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addNewRate_args args, org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> resultHandler) throws org.apache.thrift.TException {
        iface.addNewRate(args.newRate,resultHandler);
      }
    }

    public static class addBulk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBulk_args, edu.pja.sri.hw06.stockexchangeservice.StatusMessage> {
      public addBulk() {
        super("addBulk");
      }

      public addBulk_args getEmptyArgsInstance() {
        return new addBulk_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage>() { 
          public void onComplete(edu.pja.sri.hw06.stockexchangeservice.StatusMessage o) {
            addBulk_result result = new addBulk_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addBulk_result result = new addBulk_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBulk_args args, org.apache.thrift.async.AsyncMethodCallback<edu.pja.sri.hw06.stockexchangeservice.StatusMessage> resultHandler) throws org.apache.thrift.TException {
        iface.addBulk(args.newRates,resultHandler);
      }
    }

  }

  public static class getLatestExchangeRate_args implements org.apache.thrift.TBase<getLatestExchangeRate_args, getLatestExchangeRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestExchangeRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestExchangeRate_args");

    private static final org.apache.thrift.protocol.TField BASE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("baseCurrency", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUOTE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteCurrency", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ALLOW_CROSS_FIELD_DESC = new org.apache.thrift.protocol.TField("allowCross", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLatestExchangeRate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLatestExchangeRate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String baseCurrency; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String quoteCurrency; // required
    public boolean allowCross; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASE_CURRENCY((short)1, "baseCurrency"),
      QUOTE_CURRENCY((short)2, "quoteCurrency"),
      ALLOW_CROSS((short)3, "allowCross");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASE_CURRENCY
            return BASE_CURRENCY;
          case 2: // QUOTE_CURRENCY
            return QUOTE_CURRENCY;
          case 3: // ALLOW_CROSS
            return ALLOW_CROSS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ALLOWCROSS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("baseCurrency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUOTE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("quoteCurrency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ALLOW_CROSS, new org.apache.thrift.meta_data.FieldMetaData("allowCross", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestExchangeRate_args.class, metaDataMap);
    }

    public getLatestExchangeRate_args() {
    }

    public getLatestExchangeRate_args(
      java.lang.String baseCurrency,
      java.lang.String quoteCurrency,
      boolean allowCross)
    {
      this();
      this.baseCurrency = baseCurrency;
      this.quoteCurrency = quoteCurrency;
      this.allowCross = allowCross;
      setAllowCrossIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestExchangeRate_args(getLatestExchangeRate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBaseCurrency()) {
        this.baseCurrency = other.baseCurrency;
      }
      if (other.isSetQuoteCurrency()) {
        this.quoteCurrency = other.quoteCurrency;
      }
      this.allowCross = other.allowCross;
    }

    public getLatestExchangeRate_args deepCopy() {
      return new getLatestExchangeRate_args(this);
    }

    @Override
    public void clear() {
      this.baseCurrency = null;
      this.quoteCurrency = null;
      setAllowCrossIsSet(false);
      this.allowCross = false;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBaseCurrency() {
      return this.baseCurrency;
    }

    public getLatestExchangeRate_args setBaseCurrency(@org.apache.thrift.annotation.Nullable java.lang.String baseCurrency) {
      this.baseCurrency = baseCurrency;
      return this;
    }

    public void unsetBaseCurrency() {
      this.baseCurrency = null;
    }

    /** Returns true if field baseCurrency is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseCurrency() {
      return this.baseCurrency != null;
    }

    public void setBaseCurrencyIsSet(boolean value) {
      if (!value) {
        this.baseCurrency = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getQuoteCurrency() {
      return this.quoteCurrency;
    }

    public getLatestExchangeRate_args setQuoteCurrency(@org.apache.thrift.annotation.Nullable java.lang.String quoteCurrency) {
      this.quoteCurrency = quoteCurrency;
      return this;
    }

    public void unsetQuoteCurrency() {
      this.quoteCurrency = null;
    }

    /** Returns true if field quoteCurrency is set (has been assigned a value) and false otherwise */
    public boolean isSetQuoteCurrency() {
      return this.quoteCurrency != null;
    }

    public void setQuoteCurrencyIsSet(boolean value) {
      if (!value) {
        this.quoteCurrency = null;
      }
    }

    public boolean isAllowCross() {
      return this.allowCross;
    }

    public getLatestExchangeRate_args setAllowCross(boolean allowCross) {
      this.allowCross = allowCross;
      setAllowCrossIsSet(true);
      return this;
    }

    public void unsetAllowCross() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOWCROSS_ISSET_ID);
    }

    /** Returns true if field allowCross is set (has been assigned a value) and false otherwise */
    public boolean isSetAllowCross() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOWCROSS_ISSET_ID);
    }

    public void setAllowCrossIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOWCROSS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BASE_CURRENCY:
        if (value == null) {
          unsetBaseCurrency();
        } else {
          setBaseCurrency((java.lang.String)value);
        }
        break;

      case QUOTE_CURRENCY:
        if (value == null) {
          unsetQuoteCurrency();
        } else {
          setQuoteCurrency((java.lang.String)value);
        }
        break;

      case ALLOW_CROSS:
        if (value == null) {
          unsetAllowCross();
        } else {
          setAllowCross((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BASE_CURRENCY:
        return getBaseCurrency();

      case QUOTE_CURRENCY:
        return getQuoteCurrency();

      case ALLOW_CROSS:
        return isAllowCross();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BASE_CURRENCY:
        return isSetBaseCurrency();
      case QUOTE_CURRENCY:
        return isSetQuoteCurrency();
      case ALLOW_CROSS:
        return isSetAllowCross();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getLatestExchangeRate_args)
        return this.equals((getLatestExchangeRate_args)that);
      return false;
    }

    public boolean equals(getLatestExchangeRate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_baseCurrency = true && this.isSetBaseCurrency();
      boolean that_present_baseCurrency = true && that.isSetBaseCurrency();
      if (this_present_baseCurrency || that_present_baseCurrency) {
        if (!(this_present_baseCurrency && that_present_baseCurrency))
          return false;
        if (!this.baseCurrency.equals(that.baseCurrency))
          return false;
      }

      boolean this_present_quoteCurrency = true && this.isSetQuoteCurrency();
      boolean that_present_quoteCurrency = true && that.isSetQuoteCurrency();
      if (this_present_quoteCurrency || that_present_quoteCurrency) {
        if (!(this_present_quoteCurrency && that_present_quoteCurrency))
          return false;
        if (!this.quoteCurrency.equals(that.quoteCurrency))
          return false;
      }

      boolean this_present_allowCross = true;
      boolean that_present_allowCross = true;
      if (this_present_allowCross || that_present_allowCross) {
        if (!(this_present_allowCross && that_present_allowCross))
          return false;
        if (this.allowCross != that.allowCross)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBaseCurrency()) ? 131071 : 524287);
      if (isSetBaseCurrency())
        hashCode = hashCode * 8191 + baseCurrency.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuoteCurrency()) ? 131071 : 524287);
      if (isSetQuoteCurrency())
        hashCode = hashCode * 8191 + quoteCurrency.hashCode();

      hashCode = hashCode * 8191 + ((allowCross) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getLatestExchangeRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBaseCurrency(), other.isSetBaseCurrency());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseCurrency()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseCurrency, other.baseCurrency);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetQuoteCurrency(), other.isSetQuoteCurrency());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuoteCurrency()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteCurrency, other.quoteCurrency);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAllowCross(), other.isSetAllowCross());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllowCross()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowCross, other.allowCross);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLatestExchangeRate_args(");
      boolean first = true;

      sb.append("baseCurrency:");
      if (this.baseCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.baseCurrency);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("quoteCurrency:");
      if (this.quoteCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.quoteCurrency);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("allowCross:");
      sb.append(this.allowCross);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestExchangeRate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLatestExchangeRate_argsStandardScheme getScheme() {
        return new getLatestExchangeRate_argsStandardScheme();
      }
    }

    private static class getLatestExchangeRate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLatestExchangeRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestExchangeRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASE_CURRENCY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.baseCurrency = iprot.readString();
                struct.setBaseCurrencyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUOTE_CURRENCY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.quoteCurrency = iprot.readString();
                struct.setQuoteCurrencyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALLOW_CROSS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.allowCross = iprot.readBool();
                struct.setAllowCrossIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestExchangeRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.baseCurrency != null) {
          oprot.writeFieldBegin(BASE_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.baseCurrency);
          oprot.writeFieldEnd();
        }
        if (struct.quoteCurrency != null) {
          oprot.writeFieldBegin(QUOTE_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.quoteCurrency);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ALLOW_CROSS_FIELD_DESC);
        oprot.writeBool(struct.allowCross);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestExchangeRate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLatestExchangeRate_argsTupleScheme getScheme() {
        return new getLatestExchangeRate_argsTupleScheme();
      }
    }

    private static class getLatestExchangeRate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLatestExchangeRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestExchangeRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBaseCurrency()) {
          optionals.set(0);
        }
        if (struct.isSetQuoteCurrency()) {
          optionals.set(1);
        }
        if (struct.isSetAllowCross()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBaseCurrency()) {
          oprot.writeString(struct.baseCurrency);
        }
        if (struct.isSetQuoteCurrency()) {
          oprot.writeString(struct.quoteCurrency);
        }
        if (struct.isSetAllowCross()) {
          oprot.writeBool(struct.allowCross);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestExchangeRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.baseCurrency = iprot.readString();
          struct.setBaseCurrencyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.quoteCurrency = iprot.readString();
          struct.setQuoteCurrencyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.allowCross = iprot.readBool();
          struct.setAllowCrossIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLatestExchangeRate_result implements org.apache.thrift.TBase<getLatestExchangeRate_result, getLatestExchangeRate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestExchangeRate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestExchangeRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLatestExchangeRate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLatestExchangeRate_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ExchangeRate success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExchangeRate.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestExchangeRate_result.class, metaDataMap);
    }

    public getLatestExchangeRate_result() {
    }

    public getLatestExchangeRate_result(
      ExchangeRate success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestExchangeRate_result(getLatestExchangeRate_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExchangeRate(other.success);
      }
    }

    public getLatestExchangeRate_result deepCopy() {
      return new getLatestExchangeRate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ExchangeRate getSuccess() {
      return this.success;
    }

    public getLatestExchangeRate_result setSuccess(@org.apache.thrift.annotation.Nullable ExchangeRate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExchangeRate)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getLatestExchangeRate_result)
        return this.equals((getLatestExchangeRate_result)that);
      return false;
    }

    public boolean equals(getLatestExchangeRate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLatestExchangeRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLatestExchangeRate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestExchangeRate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLatestExchangeRate_resultStandardScheme getScheme() {
        return new getLatestExchangeRate_resultStandardScheme();
      }
    }

    private static class getLatestExchangeRate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLatestExchangeRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestExchangeRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExchangeRate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestExchangeRate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestExchangeRate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLatestExchangeRate_resultTupleScheme getScheme() {
        return new getLatestExchangeRate_resultTupleScheme();
      }
    }

    private static class getLatestExchangeRate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLatestExchangeRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestExchangeRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestExchangeRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ExchangeRate();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getExchangeRatesForWindow_args implements org.apache.thrift.TBase<getExchangeRatesForWindow_args, getExchangeRatesForWindow_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExchangeRatesForWindow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExchangeRatesForWindow_args");

    private static final org.apache.thrift.protocol.TField BASE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("baseCurrency", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUOTE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteCurrency", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FROM_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTimestamp", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField TO_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("toTimestamp", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExchangeRatesForWindow_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExchangeRatesForWindow_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String baseCurrency; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String quoteCurrency; // required
    public long fromTimestamp; // required
    public long toTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASE_CURRENCY((short)1, "baseCurrency"),
      QUOTE_CURRENCY((short)2, "quoteCurrency"),
      FROM_TIMESTAMP((short)3, "fromTimestamp"),
      TO_TIMESTAMP((short)4, "toTimestamp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASE_CURRENCY
            return BASE_CURRENCY;
          case 2: // QUOTE_CURRENCY
            return QUOTE_CURRENCY;
          case 3: // FROM_TIMESTAMP
            return FROM_TIMESTAMP;
          case 4: // TO_TIMESTAMP
            return TO_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMTIMESTAMP_ISSET_ID = 0;
    private static final int __TOTIMESTAMP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("baseCurrency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUOTE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("quoteCurrency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FROM_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("fromTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("toTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExchangeRatesForWindow_args.class, metaDataMap);
    }

    public getExchangeRatesForWindow_args() {
    }

    public getExchangeRatesForWindow_args(
      java.lang.String baseCurrency,
      java.lang.String quoteCurrency,
      long fromTimestamp,
      long toTimestamp)
    {
      this();
      this.baseCurrency = baseCurrency;
      this.quoteCurrency = quoteCurrency;
      this.fromTimestamp = fromTimestamp;
      setFromTimestampIsSet(true);
      this.toTimestamp = toTimestamp;
      setToTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExchangeRatesForWindow_args(getExchangeRatesForWindow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBaseCurrency()) {
        this.baseCurrency = other.baseCurrency;
      }
      if (other.isSetQuoteCurrency()) {
        this.quoteCurrency = other.quoteCurrency;
      }
      this.fromTimestamp = other.fromTimestamp;
      this.toTimestamp = other.toTimestamp;
    }

    public getExchangeRatesForWindow_args deepCopy() {
      return new getExchangeRatesForWindow_args(this);
    }

    @Override
    public void clear() {
      this.baseCurrency = null;
      this.quoteCurrency = null;
      setFromTimestampIsSet(false);
      this.fromTimestamp = 0;
      setToTimestampIsSet(false);
      this.toTimestamp = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBaseCurrency() {
      return this.baseCurrency;
    }

    public getExchangeRatesForWindow_args setBaseCurrency(@org.apache.thrift.annotation.Nullable java.lang.String baseCurrency) {
      this.baseCurrency = baseCurrency;
      return this;
    }

    public void unsetBaseCurrency() {
      this.baseCurrency = null;
    }

    /** Returns true if field baseCurrency is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseCurrency() {
      return this.baseCurrency != null;
    }

    public void setBaseCurrencyIsSet(boolean value) {
      if (!value) {
        this.baseCurrency = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getQuoteCurrency() {
      return this.quoteCurrency;
    }

    public getExchangeRatesForWindow_args setQuoteCurrency(@org.apache.thrift.annotation.Nullable java.lang.String quoteCurrency) {
      this.quoteCurrency = quoteCurrency;
      return this;
    }

    public void unsetQuoteCurrency() {
      this.quoteCurrency = null;
    }

    /** Returns true if field quoteCurrency is set (has been assigned a value) and false otherwise */
    public boolean isSetQuoteCurrency() {
      return this.quoteCurrency != null;
    }

    public void setQuoteCurrencyIsSet(boolean value) {
      if (!value) {
        this.quoteCurrency = null;
      }
    }

    public long getFromTimestamp() {
      return this.fromTimestamp;
    }

    public getExchangeRatesForWindow_args setFromTimestamp(long fromTimestamp) {
      this.fromTimestamp = fromTimestamp;
      setFromTimestampIsSet(true);
      return this;
    }

    public void unsetFromTimestamp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FROMTIMESTAMP_ISSET_ID);
    }

    /** Returns true if field fromTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetFromTimestamp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FROMTIMESTAMP_ISSET_ID);
    }

    public void setFromTimestampIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FROMTIMESTAMP_ISSET_ID, value);
    }

    public long getToTimestamp() {
      return this.toTimestamp;
    }

    public getExchangeRatesForWindow_args setToTimestamp(long toTimestamp) {
      this.toTimestamp = toTimestamp;
      setToTimestampIsSet(true);
      return this;
    }

    public void unsetToTimestamp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTIMESTAMP_ISSET_ID);
    }

    /** Returns true if field toTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetToTimestamp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTIMESTAMP_ISSET_ID);
    }

    public void setToTimestampIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BASE_CURRENCY:
        if (value == null) {
          unsetBaseCurrency();
        } else {
          setBaseCurrency((java.lang.String)value);
        }
        break;

      case QUOTE_CURRENCY:
        if (value == null) {
          unsetQuoteCurrency();
        } else {
          setQuoteCurrency((java.lang.String)value);
        }
        break;

      case FROM_TIMESTAMP:
        if (value == null) {
          unsetFromTimestamp();
        } else {
          setFromTimestamp((java.lang.Long)value);
        }
        break;

      case TO_TIMESTAMP:
        if (value == null) {
          unsetToTimestamp();
        } else {
          setToTimestamp((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BASE_CURRENCY:
        return getBaseCurrency();

      case QUOTE_CURRENCY:
        return getQuoteCurrency();

      case FROM_TIMESTAMP:
        return getFromTimestamp();

      case TO_TIMESTAMP:
        return getToTimestamp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BASE_CURRENCY:
        return isSetBaseCurrency();
      case QUOTE_CURRENCY:
        return isSetQuoteCurrency();
      case FROM_TIMESTAMP:
        return isSetFromTimestamp();
      case TO_TIMESTAMP:
        return isSetToTimestamp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getExchangeRatesForWindow_args)
        return this.equals((getExchangeRatesForWindow_args)that);
      return false;
    }

    public boolean equals(getExchangeRatesForWindow_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_baseCurrency = true && this.isSetBaseCurrency();
      boolean that_present_baseCurrency = true && that.isSetBaseCurrency();
      if (this_present_baseCurrency || that_present_baseCurrency) {
        if (!(this_present_baseCurrency && that_present_baseCurrency))
          return false;
        if (!this.baseCurrency.equals(that.baseCurrency))
          return false;
      }

      boolean this_present_quoteCurrency = true && this.isSetQuoteCurrency();
      boolean that_present_quoteCurrency = true && that.isSetQuoteCurrency();
      if (this_present_quoteCurrency || that_present_quoteCurrency) {
        if (!(this_present_quoteCurrency && that_present_quoteCurrency))
          return false;
        if (!this.quoteCurrency.equals(that.quoteCurrency))
          return false;
      }

      boolean this_present_fromTimestamp = true;
      boolean that_present_fromTimestamp = true;
      if (this_present_fromTimestamp || that_present_fromTimestamp) {
        if (!(this_present_fromTimestamp && that_present_fromTimestamp))
          return false;
        if (this.fromTimestamp != that.fromTimestamp)
          return false;
      }

      boolean this_present_toTimestamp = true;
      boolean that_present_toTimestamp = true;
      if (this_present_toTimestamp || that_present_toTimestamp) {
        if (!(this_present_toTimestamp && that_present_toTimestamp))
          return false;
        if (this.toTimestamp != that.toTimestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBaseCurrency()) ? 131071 : 524287);
      if (isSetBaseCurrency())
        hashCode = hashCode * 8191 + baseCurrency.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuoteCurrency()) ? 131071 : 524287);
      if (isSetQuoteCurrency())
        hashCode = hashCode * 8191 + quoteCurrency.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fromTimestamp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(toTimestamp);

      return hashCode;
    }

    @Override
    public int compareTo(getExchangeRatesForWindow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBaseCurrency(), other.isSetBaseCurrency());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseCurrency()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseCurrency, other.baseCurrency);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetQuoteCurrency(), other.isSetQuoteCurrency());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuoteCurrency()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteCurrency, other.quoteCurrency);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFromTimestamp(), other.isSetFromTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTimestamp, other.fromTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetToTimestamp(), other.isSetToTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTimestamp, other.toTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExchangeRatesForWindow_args(");
      boolean first = true;

      sb.append("baseCurrency:");
      if (this.baseCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.baseCurrency);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("quoteCurrency:");
      if (this.quoteCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.quoteCurrency);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromTimestamp:");
      sb.append(this.fromTimestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toTimestamp:");
      sb.append(this.toTimestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExchangeRatesForWindow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExchangeRatesForWindow_argsStandardScheme getScheme() {
        return new getExchangeRatesForWindow_argsStandardScheme();
      }
    }

    private static class getExchangeRatesForWindow_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExchangeRatesForWindow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExchangeRatesForWindow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASE_CURRENCY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.baseCurrency = iprot.readString();
                struct.setBaseCurrencyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUOTE_CURRENCY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.quoteCurrency = iprot.readString();
                struct.setQuoteCurrencyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FROM_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromTimestamp = iprot.readI64();
                struct.setFromTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TO_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toTimestamp = iprot.readI64();
                struct.setToTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExchangeRatesForWindow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.baseCurrency != null) {
          oprot.writeFieldBegin(BASE_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.baseCurrency);
          oprot.writeFieldEnd();
        }
        if (struct.quoteCurrency != null) {
          oprot.writeFieldBegin(QUOTE_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.quoteCurrency);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.fromTimestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.toTimestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExchangeRatesForWindow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExchangeRatesForWindow_argsTupleScheme getScheme() {
        return new getExchangeRatesForWindow_argsTupleScheme();
      }
    }

    private static class getExchangeRatesForWindow_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExchangeRatesForWindow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExchangeRatesForWindow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBaseCurrency()) {
          optionals.set(0);
        }
        if (struct.isSetQuoteCurrency()) {
          optionals.set(1);
        }
        if (struct.isSetFromTimestamp()) {
          optionals.set(2);
        }
        if (struct.isSetToTimestamp()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBaseCurrency()) {
          oprot.writeString(struct.baseCurrency);
        }
        if (struct.isSetQuoteCurrency()) {
          oprot.writeString(struct.quoteCurrency);
        }
        if (struct.isSetFromTimestamp()) {
          oprot.writeI64(struct.fromTimestamp);
        }
        if (struct.isSetToTimestamp()) {
          oprot.writeI64(struct.toTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExchangeRatesForWindow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.baseCurrency = iprot.readString();
          struct.setBaseCurrencyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.quoteCurrency = iprot.readString();
          struct.setQuoteCurrencyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fromTimestamp = iprot.readI64();
          struct.setFromTimestampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.toTimestamp = iprot.readI64();
          struct.setToTimestampIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getExchangeRatesForWindow_result implements org.apache.thrift.TBase<getExchangeRatesForWindow_result, getExchangeRatesForWindow_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExchangeRatesForWindow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExchangeRatesForWindow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExchangeRatesForWindow_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExchangeRatesForWindow_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ExchangeRate> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ExchangeRateList")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExchangeRatesForWindow_result.class, metaDataMap);
    }

    public getExchangeRatesForWindow_result() {
    }

    public getExchangeRatesForWindow_result(
      java.util.List<ExchangeRate> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExchangeRatesForWindow_result(getExchangeRatesForWindow_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ExchangeRate> __this__success = new java.util.ArrayList<ExchangeRate>(other.success.size());
        for (ExchangeRate other_element : other.success) {
          __this__success.add(new ExchangeRate(other_element));
        }
        this.success = __this__success;
      }
    }

    public getExchangeRatesForWindow_result deepCopy() {
      return new getExchangeRatesForWindow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ExchangeRate> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ExchangeRate elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ExchangeRate>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ExchangeRate> getSuccess() {
      return this.success;
    }

    public getExchangeRatesForWindow_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ExchangeRate> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ExchangeRate>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getExchangeRatesForWindow_result)
        return this.equals((getExchangeRatesForWindow_result)that);
      return false;
    }

    public boolean equals(getExchangeRatesForWindow_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExchangeRatesForWindow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExchangeRatesForWindow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExchangeRatesForWindow_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExchangeRatesForWindow_resultStandardScheme getScheme() {
        return new getExchangeRatesForWindow_resultStandardScheme();
      }
    }

    private static class getExchangeRatesForWindow_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExchangeRatesForWindow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExchangeRatesForWindow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ExchangeRate>(_list0.size);
                  @org.apache.thrift.annotation.Nullable ExchangeRate _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ExchangeRate();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExchangeRatesForWindow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ExchangeRate _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExchangeRatesForWindow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExchangeRatesForWindow_resultTupleScheme getScheme() {
        return new getExchangeRatesForWindow_resultTupleScheme();
      }
    }

    private static class getExchangeRatesForWindow_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExchangeRatesForWindow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExchangeRatesForWindow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ExchangeRate _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExchangeRatesForWindow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<ExchangeRate>(_list5.size);
            @org.apache.thrift.annotation.Nullable ExchangeRate _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new ExchangeRate();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addNewRate_args implements org.apache.thrift.TBase<addNewRate_args, addNewRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNewRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewRate_args");

    private static final org.apache.thrift.protocol.TField NEW_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("newRate", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNewRate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNewRate_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ExchangeRate newRate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_RATE((short)1, "newRate");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_RATE
            return NEW_RATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_RATE, new org.apache.thrift.meta_data.FieldMetaData("newRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExchangeRate.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewRate_args.class, metaDataMap);
    }

    public addNewRate_args() {
    }

    public addNewRate_args(
      ExchangeRate newRate)
    {
      this();
      this.newRate = newRate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNewRate_args(addNewRate_args other) {
      if (other.isSetNewRate()) {
        this.newRate = new ExchangeRate(other.newRate);
      }
    }

    public addNewRate_args deepCopy() {
      return new addNewRate_args(this);
    }

    @Override
    public void clear() {
      this.newRate = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ExchangeRate getNewRate() {
      return this.newRate;
    }

    public addNewRate_args setNewRate(@org.apache.thrift.annotation.Nullable ExchangeRate newRate) {
      this.newRate = newRate;
      return this;
    }

    public void unsetNewRate() {
      this.newRate = null;
    }

    /** Returns true if field newRate is set (has been assigned a value) and false otherwise */
    public boolean isSetNewRate() {
      return this.newRate != null;
    }

    public void setNewRateIsSet(boolean value) {
      if (!value) {
        this.newRate = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NEW_RATE:
        if (value == null) {
          unsetNewRate();
        } else {
          setNewRate((ExchangeRate)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_RATE:
        return getNewRate();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NEW_RATE:
        return isSetNewRate();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addNewRate_args)
        return this.equals((addNewRate_args)that);
      return false;
    }

    public boolean equals(addNewRate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_newRate = true && this.isSetNewRate();
      boolean that_present_newRate = true && that.isSetNewRate();
      if (this_present_newRate || that_present_newRate) {
        if (!(this_present_newRate && that_present_newRate))
          return false;
        if (!this.newRate.equals(that.newRate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNewRate()) ? 131071 : 524287);
      if (isSetNewRate())
        hashCode = hashCode * 8191 + newRate.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addNewRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetNewRate(), other.isSetNewRate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewRate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newRate, other.newRate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addNewRate_args(");
      boolean first = true;

      sb.append("newRate:");
      if (this.newRate == null) {
        sb.append("null");
      } else {
        sb.append(this.newRate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newRate != null) {
        newRate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNewRate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNewRate_argsStandardScheme getScheme() {
        return new addNewRate_argsStandardScheme();
      }
    }

    private static class addNewRate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNewRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNewRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_RATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newRate = new ExchangeRate();
                struct.newRate.read(iprot);
                struct.setNewRateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNewRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newRate != null) {
          oprot.writeFieldBegin(NEW_RATE_FIELD_DESC);
          struct.newRate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNewRate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNewRate_argsTupleScheme getScheme() {
        return new addNewRate_argsTupleScheme();
      }
    }

    private static class addNewRate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNewRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNewRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNewRate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewRate()) {
          struct.newRate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNewRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newRate = new ExchangeRate();
          struct.newRate.read(iprot);
          struct.setNewRateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addNewRate_result implements org.apache.thrift.TBase<addNewRate_result, addNewRate_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNewRate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNewRate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNewRate_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable edu.pja.sri.hw06.stockexchangeservice.StatusMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.pja.sri.hw06.stockexchangeservice.StatusMessage.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewRate_result.class, metaDataMap);
    }

    public addNewRate_result() {
    }

    public addNewRate_result(
      edu.pja.sri.hw06.stockexchangeservice.StatusMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNewRate_result(addNewRate_result other) {
      if (other.isSetSuccess()) {
        this.success = new edu.pja.sri.hw06.stockexchangeservice.StatusMessage(other.success);
      }
    }

    public addNewRate_result deepCopy() {
      return new addNewRate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public edu.pja.sri.hw06.stockexchangeservice.StatusMessage getSuccess() {
      return this.success;
    }

    public addNewRate_result setSuccess(@org.apache.thrift.annotation.Nullable edu.pja.sri.hw06.stockexchangeservice.StatusMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((edu.pja.sri.hw06.stockexchangeservice.StatusMessage)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addNewRate_result)
        return this.equals((addNewRate_result)that);
      return false;
    }

    public boolean equals(addNewRate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addNewRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addNewRate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNewRate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNewRate_resultStandardScheme getScheme() {
        return new addNewRate_resultStandardScheme();
      }
    }

    private static class addNewRate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNewRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNewRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new edu.pja.sri.hw06.stockexchangeservice.StatusMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNewRate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNewRate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNewRate_resultTupleScheme getScheme() {
        return new addNewRate_resultTupleScheme();
      }
    }

    private static class addNewRate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNewRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNewRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNewRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new edu.pja.sri.hw06.stockexchangeservice.StatusMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addBulk_args implements org.apache.thrift.TBase<addBulk_args, addBulk_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBulk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBulk_args");

    private static final org.apache.thrift.protocol.TField NEW_RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("newRates", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addBulk_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addBulk_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ExchangeRate> newRates; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_RATES((short)1, "newRates");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_RATES
            return NEW_RATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_RATES, new org.apache.thrift.meta_data.FieldMetaData("newRates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ExchangeRateList")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBulk_args.class, metaDataMap);
    }

    public addBulk_args() {
    }

    public addBulk_args(
      java.util.List<ExchangeRate> newRates)
    {
      this();
      this.newRates = newRates;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBulk_args(addBulk_args other) {
      if (other.isSetNewRates()) {
        java.util.List<ExchangeRate> __this__newRates = new java.util.ArrayList<ExchangeRate>(other.newRates.size());
        for (ExchangeRate other_element : other.newRates) {
          __this__newRates.add(new ExchangeRate(other_element));
        }
        this.newRates = __this__newRates;
      }
    }

    public addBulk_args deepCopy() {
      return new addBulk_args(this);
    }

    @Override
    public void clear() {
      this.newRates = null;
    }

    public int getNewRatesSize() {
      return (this.newRates == null) ? 0 : this.newRates.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ExchangeRate> getNewRatesIterator() {
      return (this.newRates == null) ? null : this.newRates.iterator();
    }

    public void addToNewRates(ExchangeRate elem) {
      if (this.newRates == null) {
        this.newRates = new java.util.ArrayList<ExchangeRate>();
      }
      this.newRates.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ExchangeRate> getNewRates() {
      return this.newRates;
    }

    public addBulk_args setNewRates(@org.apache.thrift.annotation.Nullable java.util.List<ExchangeRate> newRates) {
      this.newRates = newRates;
      return this;
    }

    public void unsetNewRates() {
      this.newRates = null;
    }

    /** Returns true if field newRates is set (has been assigned a value) and false otherwise */
    public boolean isSetNewRates() {
      return this.newRates != null;
    }

    public void setNewRatesIsSet(boolean value) {
      if (!value) {
        this.newRates = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NEW_RATES:
        if (value == null) {
          unsetNewRates();
        } else {
          setNewRates((java.util.List<ExchangeRate>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_RATES:
        return getNewRates();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NEW_RATES:
        return isSetNewRates();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addBulk_args)
        return this.equals((addBulk_args)that);
      return false;
    }

    public boolean equals(addBulk_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_newRates = true && this.isSetNewRates();
      boolean that_present_newRates = true && that.isSetNewRates();
      if (this_present_newRates || that_present_newRates) {
        if (!(this_present_newRates && that_present_newRates))
          return false;
        if (!this.newRates.equals(that.newRates))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNewRates()) ? 131071 : 524287);
      if (isSetNewRates())
        hashCode = hashCode * 8191 + newRates.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addBulk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetNewRates(), other.isSetNewRates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewRates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newRates, other.newRates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addBulk_args(");
      boolean first = true;

      sb.append("newRates:");
      if (this.newRates == null) {
        sb.append("null");
      } else {
        sb.append(this.newRates);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBulk_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBulk_argsStandardScheme getScheme() {
        return new addBulk_argsStandardScheme();
      }
    }

    private static class addBulk_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addBulk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBulk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_RATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.newRates = new java.util.ArrayList<ExchangeRate>(_list8.size);
                  @org.apache.thrift.annotation.Nullable ExchangeRate _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new ExchangeRate();
                    _elem9.read(iprot);
                    struct.newRates.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setNewRatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBulk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newRates != null) {
          oprot.writeFieldBegin(NEW_RATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.newRates.size()));
            for (ExchangeRate _iter11 : struct.newRates)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBulk_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBulk_argsTupleScheme getScheme() {
        return new addBulk_argsTupleScheme();
      }
    }

    private static class addBulk_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addBulk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBulk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNewRates()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewRates()) {
          {
            oprot.writeI32(struct.newRates.size());
            for (ExchangeRate _iter12 : struct.newRates)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBulk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.newRates = new java.util.ArrayList<ExchangeRate>(_list13.size);
            @org.apache.thrift.annotation.Nullable ExchangeRate _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new ExchangeRate();
              _elem14.read(iprot);
              struct.newRates.add(_elem14);
            }
          }
          struct.setNewRatesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addBulk_result implements org.apache.thrift.TBase<addBulk_result, addBulk_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBulk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBulk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addBulk_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addBulk_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable edu.pja.sri.hw06.stockexchangeservice.StatusMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.pja.sri.hw06.stockexchangeservice.StatusMessage.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBulk_result.class, metaDataMap);
    }

    public addBulk_result() {
    }

    public addBulk_result(
      edu.pja.sri.hw06.stockexchangeservice.StatusMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBulk_result(addBulk_result other) {
      if (other.isSetSuccess()) {
        this.success = new edu.pja.sri.hw06.stockexchangeservice.StatusMessage(other.success);
      }
    }

    public addBulk_result deepCopy() {
      return new addBulk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public edu.pja.sri.hw06.stockexchangeservice.StatusMessage getSuccess() {
      return this.success;
    }

    public addBulk_result setSuccess(@org.apache.thrift.annotation.Nullable edu.pja.sri.hw06.stockexchangeservice.StatusMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((edu.pja.sri.hw06.stockexchangeservice.StatusMessage)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addBulk_result)
        return this.equals((addBulk_result)that);
      return false;
    }

    public boolean equals(addBulk_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addBulk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addBulk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBulk_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBulk_resultStandardScheme getScheme() {
        return new addBulk_resultStandardScheme();
      }
    }

    private static class addBulk_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addBulk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBulk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new edu.pja.sri.hw06.stockexchangeservice.StatusMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBulk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBulk_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBulk_resultTupleScheme getScheme() {
        return new addBulk_resultTupleScheme();
      }
    }

    private static class addBulk_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addBulk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBulk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBulk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new edu.pja.sri.hw06.stockexchangeservice.StatusMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
